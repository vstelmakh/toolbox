#!/bin/bash
# shellcheck disable=SC2155,SC1090

function main() {
    DIR_PROJECT_ROOT="$(get_project_root_dir)"
    DIR_COMMAND="${DIR_PROJECT_ROOT}/src/command"
    load_config

    case "${1}" in
        "")
            command_about
            ;;
        "--toolbox-completion")
            command_completion
            ;;
        *)
            command_execute "$@"
            ;;
    esac
}

function command_execute() {
    if [ "${2}" != "--toolbox-completion" ]; then # config validation (except completion)
        local COMMAND=${1}
        run_command config "${COMMAND}" >> /dev/null
        if [ $? -gt 0 ]; then
            echo -e "Missing required configuration. Execute \e[32mconfig\e[0m command for details."
            exit 1
        fi
    fi

    run_command "$@"
}

function command_completion() {
    echo "$(get_commands)"
}

function command_about() {
    cat << HEREDOC
   __              ____
  / /_____  ____  / / /_  ____  _  __
 / __/ __ \/ __ \/ / __ \/ __ \| |/_/
/ /_/ /_/ / /_/ / / /_/ / /_/ />  <
\__/\____/\____/_/_.___/\____/_/|_|
HEREDOC

    run_command config >> /dev/null
    if [ $? -gt 0 ]; then
        echo
        echo -e "\e[93mWarning:\e[0m"
        echo -e "  Config \e[33mconfig.env\e[0m does not contain all the required parameters, some commands may not work."
        echo -e "  Execute \e[32mconfig\e[0m command for the details."
    fi

    echo
    echo -e "\e[33mAvailable commands:\e[0m"

    local COMMANDS=()
    IFS=" " read -r -a COMMANDS <<< "$(get_commands)"
    local COMMAND_MAX_LENGTH="$(get_max_length "${COMMANDS[@]}")"

    for COMMAND in "${COMMANDS[@]}"; do
        printf "  \e[32m%-${COMMAND_MAX_LENGTH}s\e[0m  " "${COMMAND}"
        local FILE="$(get_command_file "${COMMAND}")"
        echo "$(source "${FILE}" "--toolbox-description")"
    done
}

function get_project_root_dir() {
    local SCRIPT=$(readlink -f "${0}")
    local DIR=$(dirname "${SCRIPT}")
    readlink -f "${DIR}/.." || exit 1
}

function load_config() {
    local CONFIG_FILE="${DIR_PROJECT_ROOT}/config.env"
    if [ -f "${CONFIG_FILE}" ]; then
        set -o allexport
        source "${CONFIG_FILE}"
        set +o allexport
    fi
}

function run_command() {
    local COMMAND=${1}
    local FILE="$(get_command_file "${COMMAND}")"
    if [ ! -f "${FILE}" ]; then
        echo -e "Command \"\e[32m${COMMAND}\e[0m\" not exist"
        exit 1
    fi

    bash "${FILE}" "${@:2}"
}

function get_command_file() {
    local COMMAND=${1}
    echo "${DIR_COMMAND}/${COMMAND}.sh"
}

function get_commands() {
    local COMMANDS=()
    local SCRIPTS=$(ls "${DIR_COMMAND}"/*.sh)
    for SCRIPT in ${SCRIPTS}; do
        local COMMAND=$(echo "${SCRIPT}" | sed -E "s/^.+\///g" | sed -E "s/\.sh$//g")
        COMMANDS+=("${COMMAND}")
    done
    echo "${COMMANDS[@]}"
}

function get_max_length() {
    local ITEMS=()
    IFS=" " read -r -a ITEMS <<< "${@}"

    local MAX=0
    for ITEM in "${ITEMS[@]}"; do
        local LENGTH=${#ITEM}
        ((LENGTH > MAX)) && MAX=${LENGTH}
    done
    echo "${MAX}"
}

main "$@"
